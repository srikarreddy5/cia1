#include <stdio.h>
#define inf 10000
#define max 10


void Dij(int Gr[max][max], int n, int start) 
{
  int weight[max][max];
  int len[max];
  int pred[max];
  int visited[max], count, mindistance, nextnode, i, j;

  // Creating cost matrix
  for (i = 0; i < n; i++)
    for (j = 0; j < n; j++)
      if (Gr[i][j] == 0)
        weight[i][j] = inf;
      else
        weight[i][j] = Gr[i][j];

  for (i = 0; i < n; i++) {
    len[i] = weight[start][i];
    pred[i] = start;
    visited[i] = 0;
  }

  len[start] = 0;
  visited[start] = 1;
  count = 1;

  while (count < n - 1) {
    mindistance = inf;

    for (i = 0; i < n; i++)
      if (len[i] < mindistance && !visited[i]) {
        mindistance = len[i];
        nextnode = i;
      }

    visited[nextnode] = 1;
    for (i = 0; i < n; i++)
      if (!visited[i])
        if (mindistance + weight[nextnode][i] < len[i]) {
          len[i] = mindistance + weight[nextnode][i];
          pred[i] = nextnode;
        }
    count++;
  }

  // Printing the distance
  for (i = 0; i < n; i++)
    if (i != start) {
      printf("\nDistance from source to %d: %d", i, len[i]);
    }
}
int main() {
  int Gr[max][max], i, j, n, u;
  n = 6;

  Gr[0][0] = 0;
  Gr[0][1] = 10;
  Gr[0][2] = 0;
  Gr[0][3] = 0;
  Gr[0][4] = 0;
  Gr[0][5] = 8;

  Gr[1][0] = 0;
  Gr[1][1] = 0;
  Gr[1][2] = 0;
  Gr[1][3] = 2;
  Gr[1][4] = 0;
  Gr[1][5] = 0;

  Gr[2][0] = 0;
  Gr[2][1] = 1;
  Gr[2][2] = 0;
  Gr[2][3] = 0;
  Gr[2][4] = 0;
  Gr[2][5] = 0;
 

  Gr[3][0] = 0;
  Gr[3][1] = 0;
  Gr[3][2] = -2;
  Gr[3][3] = 0;
  Gr[3][4] = 0;
  Gr[3][5] = 0;


  Gr[4][0] = 0;
  Gr[4][1] = -4;
  Gr[4][2] = 0;
  Gr[4][3] = -1;
  Gr[4][4] = 0;
  Gr[4][5] = 0;

  Gr[5][0] = 0;
  Gr[5][1] = 0;
  Gr[5][2] = 0;
  Gr[5][3] = 0;
  Gr[5][4] = 1;
  Gr[5][5] = 0;

  u = 0;
  Dij(Gr, n, u);
  
  return(0);
  }
